class GameTest { constructor() { this.tests = []; this.passed = 0; this.failed = 0; } test(name, fn) { this.tests.push({ name, fn }); } async run() { console.log("🎮 Crystal Guardians テスト開始"); for (const test of this.tests) { try { await test.fn(); console.log(`✅ ${test.name}`); this.passed++; } catch (error) { console.error(`❌ ${test.name}: ${error.message}`); this.failed++; } } console.log(`📊 テスト結果: ${this.passed}件成功, ${this.failed}件失敗`); } assert(condition, message) { if (!condition) { throw new Error(message); } } assertEqual(actual, expected, message) { if (actual !== expected) { throw new Error(`${message}: 期待値 ${expected}, 実際の値 ${actual}`); } } } const gameTest = new GameTest(); gameTest.test("ゲーム初期化", () => { if (typeof Game !== "undefined") { const game = new Game(); gameTest.assert(game.gold === 200, "初期ゴールドは200G"); gameTest.assert(game.wave === 1, "初期ウェーブは1"); gameTest.assert(game.enemiesReached === 0, "到達した敵の数は0"); gameTest.assert(game.gameState === "playing", "ゲーム状態はplaying"); } }); gameTest.test("キャラクター作成", () => { if (typeof Warrior !== "undefined") { const warrior = new Warrior(100, 100); gameTest.assert(warrior.cost === 100, "ウォリアーのコストは100G"); gameTest.assert(warrior.x === 100, "X座標が正しく設定される"); gameTest.assert(warrior.y === 100, "Y座標が正しく設定される"); gameTest.assert(warrior.level === 1, "初期レベルは1"); } }); gameTest.test("敵生成", () => { if (typeof BasicEnemy !== "undefined") { const enemy = new BasicEnemy(); gameTest.assert(enemy.hp > 0, "敵のHPが0より大きい"); gameTest.assert(enemy.speed > 0, "敵の速度が0より大きい"); gameTest.assert(enemy.reward > 0, "敵の報酬が0より大きい"); } }); gameTest.test("セーブ機能", () => { if (typeof SaveManager !== "undefined") { const saveManager = new SaveManager(); const gameData = { gold: 500, wave: 5, characters: [] }; saveManager.save(gameData); const loaded = saveManager.load(); gameTest.assertEqual(loaded.gold, 500, "ゴールドが正しく保存・読み込みされる"); gameTest.assertEqual(loaded.wave, 5, "ウェーブが正しく保存・読み込みされる"); } }); if (typeof window !== "undefined") { window.GameTest = GameTest; window.gameTest = gameTest; setTimeout(() => gameTest.run(), 1000); }
